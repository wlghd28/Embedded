* RISC


* ARM Chip
- Acorn RISC Machine 의 약자 -> Advanced RISC Machine 의 약자로 변경.
- Soc 형태의 CPU다.
- 기존의 CPU는 연산, 제어, 기억 능력밖에 가지고 있지 않지만 ARM은 Chip 한 개에 그래픽과 USB, 네트워크 등 각종 기능까지 한 번에 탑재.
- 100MHz 속도에서 6mW만 소모할 정도로 극단적인 저전력으로 설계 -> 대표적 사례로 퀄컴이 있음.


* SOC
- System On Chip의 약자.
- Chip 속에 소프트웨어를 넣는다는 의미로 Chip 한 개로 그 자체의 시스템이 되도록 만드는 형태.
- 구성
    ● 1개 이상의 마이크로컨트롤러, 마이크로프로세서나 디지털 신호 처리기 코어를 포함한다.
    ● 롬, 램, 이이피롬과 플래시 메모리 중 일부가 포함된 메모리 블록이 있다.
    ● 진동자와 위상 고정 루프를 포함한 타이밍 발생기가 있다.
    ● 카운터-타이머, 실시간 타이머와 전원 초기화 발생기를 포함한 주변장치가 있다.
    ● 범용 직렬 버스, 파이어와이어, 이더넷, 범용 비동기 송수신, 직렬 주변장치 인터페이스 버스같은 산업표준 외부 인터페이스가 있다.
    ● 아날로그-디지털 변환회로와 디지털-아날로그 변환회로가 내장된 아날로그 인터페이스가 있다.
    ● 전압 레귤레이터와 전원 관리 회로를 포함하고 있다.


* ODROID-XU4
- ARM CPU
- 부팅하려면 SD card 또는 eMMC 메모리카드 필요.
- 부팅모드는 SD card, eMMC 모드 2개가 있음.
- SD card는 HDD(부팅속도 느림), eMMC는 SSD(부팅속도 빠름)라고 생각하면 된다.
- SD card 또는 eMMC 메모리카드에 OS를 다운로드후 부팅 가능.
- 파워 어댑터는 5V/4A를 요구한다 또는 Smart Power2 사용 가능.
- uBoot(https://github.com/hardkernel/u-boot/tree/odroidxu4-v2017.05 에서 다운가능) 코드를 컴파일해서 기본적인 부팅을 할 수 있다. 
- SD card 또는 eMMC 모듈을 통해 부팅 가능
- SD card 또는 eMMC 모듈에 우분투 OS 부트 이미지를 Write 해야 한다. (Write할 때 win32diskimager 또는 balenaEtcher 프로그램 사용)
- Write를 완료한 SD card 또는 eMMC 모듈을 장치에 장착 후 부팅한다.
- OS 종류에는 Android와 Ubuntu 등이 있다.

* ODROID-XU4 game station Turbo
- ODROID-XU4로 게임할 수 있도록 만든 OS이며 이 자체로 img파일이 있다.
- img 파일을 SD card에 flash한 후 부팅가능.
- 부팅후 OGST(Odroid Game Station Turbo) set up 과정
  1) 차례대로 
     sudo apt-get update -> y
     sudo apt-get upgrade -> y (오래 걸릴 수 있음)
     sudo apt-get dist-upgrade -> y
     sudo reboot
     명령어 실행
  2) Setup Odroid Gamestation Trubo 프로그램 실행
  3) 비밀번호 odroid 입력 후 Active console kit surpport 클릭 (console kit 사용 시 진행)
- 게임 팩을 외부 장치에 넣어서 odroid/ROMS 폴더에 넣어주면 emulation이 게임을 인식한후 실행가능.

* 부팅
- 윈도우에선 boot.ini 파일 리눅스에선 lilo, grub 파일이 있음.
- 각 부팅 파일의 경로가 정확해야 부팅이 가능함.
- ubuntu 버전도 장비와 맞아야 한다. (중요!!)
- 모니터에 화면을 띄우려면 boot.ini 파일에서 자기가 쓸 모니터의 해상도를 파악하고 그에 맞는 부분의 주석을 풀어야 한다. (HDMI, DVI 선택)
- 최근 Android는 linux의 kernel을 포함해서 나옴.
- SD card에 write된 boot img 파일들을 다시 압축해서 .img파일로 추출하려면 DD for Windows 프로그램을 활용한다.
- Android는 SD card의 속도에 따라서 부팅시간이 30분까지도 걸릴 수 있다.

* MAME
- 다양한 게임을 하기 위한 목적으로 만들어진 에뮬레이션 프레임워크
- rom 파일 형식으로 되어있는 게임 파일을 roms 폴더에 넣어서 게임 실행하는 구조
- 실행파일 다운 or 오픈소스 다운 후 컴파일 가능
- 깃주소 (https://github.com/mamedev/mame/)
- rom 파일 형식으로 되어있는 게임 파일들도 각각 버전에 맞는 파일들이 존재한다. (즉, MAME에서 지원하는 버전에 맞는 게임 파일을 넣어야 실행 가능하다.)
- MAME를 Windows에서 빌드하기 위해선 MinGW GCC compiler 라는 프로그램이 필요하다. (MAME 공식 웹 사이트에서 다운로드 가능.)
- Windows 용 MAME 개발 환경은 MinGW GCC 컴파일러, MSYS2 환경 (POSIX / Unix 호환성 계층) 및 Python 및 Git과 같은 다양한 유틸리티로 구성된다.
- Windows에서 MAME 빌드에 대한 정보 (https://www.mamedev.org/tools/)
- Ubuntu Linux 환경에서 MAME를 실행시키기 위해서 Universe라는 에뮬레이터가 필요하다.
  설치 명령어 (차례대로 실행)
  1) sudo add-apt-repository universe
  2) sudo apt update
  3) sudo apt install mame
- Compiling MAME (https://docs.mamedev.org/initialsetup/compilingmame.html)
- Compile 할 때 경고를 오류로 인식하여 컴파일이 멈추는 것을 방지하기 위해 make CFLAGS='-U_FORTIFY_SOURCE'로 명령한다.
- Compile 결과 64비트 운영체제는 mame64, 32비트 운영체제는 mame 파일이 생성된다.
- mame64, mame 실행파일을 실행하기 위해 ./mame64, ./mame 명령을 입력한다.

* 컴파일
- 관련자료 링크(https://bowbowbow.tistory.com/12)
- 기본적인 컴파일은 gcc를 사용한다.
- 현재경로에 Makefile이 있으면 make 명령으로 컴파일을 실행할 수 있다.
- Linux 환경에서 make는 파일관리 유틸리티이다.
- Linux 환경에서 make는 파일 간의 종속관계를 파악하여 Makefile( 기술파일 )에 적힌 대로 컴파일러에 명령하여 SHELL 명령이 순차적으로 실행될 수 있게 한다.
- make를 쓰는 이유
  1) 각 파일에 대한 반복적 명령의 자동화로 인한 시간 절약
  2) 프로그램의 종속 구조를 빠르게 파악 할 수 있으며 관리가 용이
  3) 단순 반복 작업 및 재작성을 최소화
- 기본적인 컴파일 과정
  1) c소스 파일을 각각 컴파일하여 object 파일을 생성한다.
  2) 각각 생성된 object 파일을 묶어 컴파일을 하면 실행파일이 생성된다.
- Makefile
  1. 구성
    1) 목적파일(Target) : 명령어가 수행되어 나온 결과를 저장할 파일
    2) 의존성(Dependency) : 목적파일을 만들기 위해 필요한 재료
    3) 명령어(Command) : 실행 되어야 할 명령어들
    4) 매크로(macro) : 코드를 단순화 시키기 위한 방법
  2. 작성규칙
    1) 목표파일 : 목표파일을 만드는데 필요한 구성요소들
    2) (tab)목표를 달성하기 위한 명령 1
    3) (tab)목표를 달성하기 위한 명령 2
- make clean 명령은 현재 디렉토리의 모든 object 파일들과 생성된 실행파일인 diary_exe를 rm 명령어로 제거해 준다.

* Cross 컴파일
- 다른 OS 기종 간에 호환을 위해서 나온 방법.
- cross compile을 위한 toolchain이란?
  기본적으로 gcc는 시스템 종속적(질문)으로 만들어지지 않았다.
  그래서, gcc는 windows에서도, linux에서도, 기타 다른 플렛폼에서도 실행할 수 있다. (컴파일만 된다면) 
  그리고, gcc가 빌드해서 산출하는 바이너리도 종속적(질문)으로 만들어지지 않았다.
  그래서, gcc는 elf(.so)뿐만 아니라 .exe/.dll도 빌드할 수 있다.

  이걸 정리하면,
  gcc는
  host : gcc를 실행하는 플렛폼
  target : gcc가 생산하는 바이너리가 실행되는 플렛폼을 조합할 수 있다.
  즉, 일반적인 ubuntu x86에 기본으로 들어 있는 gcc는 host가 linux x86, target은 linux x86이다.
  만일, ubuntu x86에서 x86_64를 빌드하고 싶다면, host가 linux x86이고 target은 linux x86_64인 gcc를 실행해야 한다. 
  만일, Windows에서 x86_64를 빌드하고 싶다면, host가 cygwin이고 target은 linux x86_64인 gcc를 실행하면 된다. 
  (참고로, gcc는 c/c++ 뿐만 아니라 fortran같은 다른 언도도 지원할 수 있다)

  이러한 gcc를 빌드하기 위해서는 수많은 input이 필요한데, 절차 또한 까다롭다.
  이러한 불편한 것을 덜어주기 위해 toolchain-ng라는 툴이 있다.
  해당 툴로 toolchain을 만들수 있다.

  toolchain이란, 위 gcc같은 개발환경 set을 말한다.
  즉, Windows에서 x86_64를 빌드하고 싶다면, 그에 맞는 gcc 셋, 즉, 툴체인이 필요한 것이다.
  linux 장비등, 같은 모듈에서 동작하는 시스템이라면,
  같은 toolchain으로 빌드하여, glibc의존성 이슈등을 방지할 수 있다.
  (host, target이외에도 glibc같은 c library 종류도 설정할 수 있다.)
- cygwin 활용 (cross compile to Linux from Windows)
- mingw32 arm linux toolchain, cmake, mingw32-make 활용 (cross compile to ARM Linux from Windows)