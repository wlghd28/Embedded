* 포팅(Porting)
- 실행 가능한 프로그램이 원래 설계된 바와 다른 컴퓨팅환경(CPU, 운영체제, 서드파티 라이브러리 등)에서 동작할 수 있도록 하는 과정
- 크로스 플랫폼 : 소스하나로 여러 플랫폼에서 사용할 수 있도록 하는 것.
  예시 ) 윈도우. 리눅스, 맥 전부 다 돌아가는 플랫폼도 크로스 플랫폼이라고함.

* 포팅은 빙산의 일각
- 포팅하려는 소스코드 중에 우리가 알고 고쳐써야하는 코드는 10% 도 안되며, 나머지 90%이상의 코드들은 알지 않아도 된다.
- 분석 안해도 된다.
- 애초에 10% 도 정말 많은 분량이다. 보통 1% 남짓이다...

* 포팅하는 법
1. 컴파일러를 멀써야하는지 부터 확인(컴파일러 변경)
- 고객사가 GCC를 쓰려한다면 GCC 컴파일러로 돌아가는 예제를 찾는다.
- 만약 그 예제를 못찾는다면... 비교적 엄청난 각오가 필요함.
- 애초에 그런상황이오면 설득시켜봐야지.

2. 부트 코드 변경
- 우리가 원하는 하드웨어로 부트코드를 바꾼다.
- 부팅은 해야지!

3. 컴파일 및 실행
- 무조건 버그나고, 죽어버림. 그렇다면 어떻게 해야할까?

4. 코드 실행 후 디버깅 후 수정

5. 4단계 반복( 보통 30회 정도 함 )

6. 포팅 완료.


* 포팅의 원리
- 10만라인이 넘는 TCP/IP 네트워크 소프트웨어를 우리가 직접 작성한다고 생각해보자.

- 포팅은 이런상황에서 나오는 답으로 나온 결과물.
- 잘작동하며, 충분히 테스트된 재사용가능한 소프트웨어를 사용만 할 수 있다면 그것만이라도 좋다.
- 재사용 하면 시간을 절약할 수 있다.
- 우리가 원하는 하드웨어에서 충분히 잘 작동하면 굳.
- 이 행위를 포팅이라고 하며, 가치 있는 일이다.



* FreeRTOS 포팅과정

1. 소스코드준비
- FreeRTOS 다운로드 사이트에 가서 파일을 받는다.
- 그리고 필요한 SOC와 컴파일러에 해당되는 예제친구들은 Demo 디렉토리에 있다.

2. 커널 소스코드의 구조
 - FreeRTOS>Source 에 들어가면 커널소스들이 보인다.
	>> 수정할 일도 수정하면도 안되는 소스코드

- FreeRTOS>Source>portable 
	>> 우리가 쓸 컴파일러를 고르면 된다. 
	>> 여기 들어가서 우리환경에 맞게 참조하면 된다. (수정해야만 하는 소스만 들어가있다)

- FreeRTOS>Demo
	>> 이미 생성되어있는 Demo 예제들이다.

- FreeRTOS>Demo>우리가원하는친구>serial
	>> 시리얼통신(UART)를 뚫을때 사용해야할 예제이다.
	>> 수정해야한다.
	>> 처음 수정때는 몇일씩이나 걸리는 그런 친구..

- FreeRTOS>Demo>우리가원하는친구 : BSP(Board 지원 패키지)
	>> 저위에 저 친구들 사용하려면.. 그냥 다 뜯어고쳐 사용해야한다.

* 다양한 RTOS 커널 포팅 유형
- 커널 포팅
	>> 방금 FreeRTOS 포팅하는 거 처럼..ㅎ
- 파일 시스템 포팅
	>> 예시) SD카드 포팅 해주세요~ 하면 해줘야지..
- 네트워크 포팅
- USB 포팅
- 블루투스 포팅
- GUI 포팅
- CAN 버스 포팅
	펌웨어 CAN통신이랑, RTOS CAN통신이랑 전혀 다름.
등등등...
